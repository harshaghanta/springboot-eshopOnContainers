version: '3.9'
services:
  catalog-api:    
    build:
      context: .
      dockerfile: Services/catalogapi/Dockerfile
    image: ${REGISTRY:-springeshop}/catalogapi:latest
    env_file:
    - .env
    environment:
      # OTEL_TRACES_EXPORTER: "jaeger,zipkin,otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      # OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger:14250"
      # OTEL_EXPORTER_ZIPKIN_ENDPOINT: "http://zipkin:9411/api/v2/spans"
      # OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://tempo:4317"
      OTEL_SERVICE_NAME: "catalog-api"
      OTEL_RESOURCE_ATTRIBUTES: "service=catalog-api"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://collector:4317"
      OTEL_METRICS_EXPORTER: "prometheus"
      OTEL_EXPORTER_PROMETHEUS_HOST: "0.0.0.0"
      OTEL_EXPORTER_PROMETHEUS_PORT: "9464"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "http://collector:4317"
    depends_on:
      db:
        condition: service_healthy
      eventbus:
        condition: service_healthy
      jaeger:
        condition: service_started
      zipkin:
        condition: service_started
    ports:
    - 8081:8080
    volumes:
      - applog_volume:/app/logs
    networks:
    - simpbridgenetwork
  basket-api:
    build:
      context: .
      dockerfile: Services/basketapi/Dockerfile
    image: ${REGISTRY:-springeshop}/basketapi:latest
    env_file:
    - .env
    environment:
      OTEL_TRACES_EXPORTER: "jaeger"
      OTEL_SERVICE_NAME: "basket-api"
      OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger:14250"
      OTEL_METRICS_EXPORTER: "prometheus"
      OTEL_EXPORTER_PROMETHEUS_HOST: "0.0.0.0"
      OTEL_EXPORTER_PROMETHEUS_PORT: "9464"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "http://collector:4317"
      SERVER_SERVLET_CONTEXT_PATH: "/basket-api"
    depends_on:
      db:
        condition: service_healthy
      basketdata:
        condition: service_started
    ports:
    - 8083:8080
    networks:
    - simpbridgenetwork

  db:
    build:
     context: .
     dockerfile: "DBSetup/Dockerfile"
    image: ${REGISTRY:-springeshop}/db:latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Pass@word
    ports:
    - 9133:1433
    networks:
    - simpbridgenetwork

  eventbus:
    image: rabbitmq:3-management-alpine
    container_name: eventbus
    networks:
    - simpbridgenetwork
    ports:
    - 5672:5672 
    - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
  ordering-api:    
    build:
      context: .
      dockerfile: Services/Ordering/orderapi/Dockerfile
    image: ${REGISTRY:-springeshop}/orderingapi:latest
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      eventbus:
        condition: service_healthy
    ports:
    - 8082:8080
    networks:
    - simpbridgenetwork
  ordering-backgroundtasks:
    build:
      context: .
      dockerfile: Services/Ordering/ordering-backgroundtasks/Dockerfile
    image: ${REGISTRY:-springeshop}/orderingbackgroundtasks:latest
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      eventbus:
        condition: service_healthy
    networks:
      - simpbridgenetwork
  webspa:
    build:
      context: .
      dockerfile: Web/WebSpa/server/Dockerfile
    image: ${REGISTRY:-springeshop}/webspa:latest
    env_file:
    - .env
    ports:
    - 8080:8080
    networks:
    - simpbridgenetwork

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
    - KEYCLOAK_ADMIN=admin
    - KEYCLOAK_ADMIN_PASSWORD=admin 
    - DB_VENDOR=h2
    - KC_HEALTH_ENABLED=true
    - KEYCLOAK_FRONTEND_URL=http://localhost:8080/keycloak
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/localhost/8080'
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./Keycloak:/opt/keycloak/data/import
    command: -v start-dev --import-realm
    ports:
    - 8095:8080
    networks:
    - simpbridgenetwork
  
  webshoppingapigw:
    image: envoyproxy/envoy:v1.11.1
    networks:
    - simpbridgenetwork

  basketdata:
    image: redis:alpine
    networks:
    - simpbridgenetwork
  
  webhooks-api:    
    build:
      context: .
      dockerfile: Services/Webhooks/webhooks-api/Dockerfile
    image: ${REGISTRY:-springeshop}/webhooksapi:latest
    env_file:
    - .env
    depends_on:
      db:
        condition: service_healthy
      eventbus:
        condition: service_healthy
    ports:
    - 5113:8080
    networks:
    - simpbridgenetwork
  webhooks-client:    
    build:
      context: .
      dockerfile: Services/Webhooks/webhooks-client/Dockerfile
    image: ${REGISTRY:-springeshop}/webhooksclient:latest
    env_file:
    - .env
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
    - 5114:8080
    networks:
    - simpbridgenetwork
  payment-api:
    build:
      context: .
      dockerfile: Services/Payment/paymentapi/Dockerfile
    image: ${REGISTRY:-springeshop}/paymentapi:latest
    env_file:
    - .env
    depends_on:      
      eventbus:
        condition: service_healthy
    ports:
    - 5108:8080
    networks:
    - simpbridgenetwork  
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/localhost/8200'
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # vault:
  #   image: hashicorp/vault
  #   container_name: vault
  #   cap_add:
  #     - IPC_LOCK
  #   ports:
  #   - 8200:8200    
  #   command: ["vault", "server", "-config=/vault/config/vault-config.json"]
  #   volumes:
  #     - ./Vault/config:/vault/config
  #     - ./Vault/data:/vault/data
  #   networks:
  #   - simpbridgenetwork

  # vault-init:
    # image: "hashicorp/vault"
    # container_name: vault-init
    # command:
    #   - "sh"
    #   - "-c"
    #   - "/vault/scripts/vault-init.sh"
    # environment:
    #   VAULT_ADDR: http://vault:8200
    # volumes:
    #   - ./Vault/scripts/vault-init.sh:/vault/scripts/vault-init.sh
    #   - ./Vault/keys:/vault/keys
    #   - ./Vault/root:/vault/root
    # depends_on:
    #   vault:
    #     condition: service_started
    # networks:
    # - simpbridgenetwork

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
    - 16686:16686
    # - 14250:14250
    - 4317
    networks:
    - simpbridgenetwork

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
    - 9411:9411
    networks:
    - simpbridgenetwork

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./Monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
    - 9090:9090
    command: ["--config.file=/etc/prometheus/prometheus.yml", "--enable-feature=exemplar-storage"]
    networks:
    - simpbridgenetwork

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
    - 3000:3000
    volumes:
      - ./Monitoring/Grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasource.yml
    depends_on:
      prometheus:
        condition: service_started
    networks:
    - simpbridgenetwork

  loki:
    container_name: loki
    image: grafana/loki:latest    
    ports:
    - 3100:3100
    networks:
    - simpbridgenetwork

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.110.0
    ports:
      - 4317
    volumes:
      - ./Monitoring/Collector/otel-collector.yml:/etc/otelcol-contrib/config.yaml
    networks:
    - simpbridgenetwork

  tempo:
    container_name: tempo
    image: grafana/tempo:2.2.2
    ports:
    - 4317
    - 3200
    command: -config.file=/etc/tempo.yml
    volumes:
      - ./Monitoring/Tempo/tempo.yml:/etc/tempo.yml
    networks:
    - simpbridgenetwork


  
  # using Dockerfile filebeat to get around the file permission issue
  # filebeat:
  #   build:
  #     context: .
  #     dockerfile: EFK/Dockerfile
  #   volumes:
  #     # - ./EFK/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #     - applog_volume:/app/logs
  #   networks:
  #   - simpbridgenetwork

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.13.3
  #   environment:
  #     - discovery.type=single-node
  #     - ELASTIC_PASSWORD=elastic
  #     - xpack.security.enabled=false
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   networks:
  #   - simpbridgenetwork

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.13.3
  #   ports:
  #     - 5601:5601
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #   - simpbridgenetwork
    

volumes:
  applog_volume:
  esdata:
  vault_data:

networks:
  simpbridgenetwork:
    driver: bridge
